services:
  app:
    image: app
    container_name: app
    env_file:
      - ./.env
    build:
      context: ../ #raiz do projeto
      dockerfile: srcs/app/Dockerfile
    volumes:
      - app_vol:/ft_transcendence
      - static_vol:/ft_transcendence/staticfiles
    networks:
      - transcendence
    depends_on:
      - postgres
      - redis
      # - daphne
    restart: always

  # gunicorn:
  #   image: gunicorn
  #   container_name: gunicorn
  #   build:
  #     context: ../ #raiz do projeto
  #     dockerfile: srcs/requirements/gunicorn/Dockerfile
  #   ports:
  #     - "8000:8000"
  #   volumes:
  #     - static_vol:/ft_transcendence/srcs/app/transcendence/staticfiles  # Arquivos estáticos com volume persistente
  #     - app_vol:/ft_transcendence
  #   networks:
  #     - transcendence
  #   depends_on:
  #     - app
  #   restart: always

  postgres:
    image: postgres
    container_name: postgres
    build:
      context: ../ #raiz do projeto
      dockerfile: srcs/requirements/postgres/Dockerfile
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_vol:/var/lib/postgresql/data
    networks:
      - transcendence
    restart: always

  postgres-exporter:
    image: wrouesnel/postgres_exporter:latest
    container_name: postgres-exporter
    env_file:
    - ./.env
    ports:
      - "9187:9187"
    networks:
      - transcendence
    depends_on:
      - postgres
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - ./.env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_vol:/var/lib/pgadmin
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    volumes:
      - grafana_vol:/var/lib/grafana
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_vol:/prometheus
      - ./requirements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - ./.env
    ports:
      - "9001:9001"
      - "9002:9000"  # Porta 9000 mapeada para a API S3
    command: server /data --console-address ":9001"
    volumes:
      - minio_vol:/data
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                   # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
        mc alias set minio http://127.0.0.1:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD # setup Minio client
        mc mb minio/$MINIO_BUCKET || true                                  # create a test bucket
        mc anonymous set public minio/$MINIO_BUCKET                        # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
        exec minio $0 "$@"                                                 # start Minio in the foreground
      '
  
  selenium:
    image: selenium/standalone-chrome
    container_name: selenium
    ports:
      - "4444:4444"
    volumes:
      - /dev/shm:/dev/shm
      - selenium_vol:/var/log/selenium
      # - chrome_profiles:/tmp/chrome
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  nginx:
    image: nginx
    container_name: nginx
    build:
      context: ../ #raiz do projeto
      dockerfile: srcs/requirements/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./requirements/nginx/nginx.conf:/etc/nginx/nginx.conf  # Configuração personalizada do Nginx
      - ./requirements/certs:/etc/nginx/certs
      - static_vol:/static  # Arquivos estáticos com volume persistente
      - nginx_vol:/var/log/nginx # Logs do nginx
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    command: [ "--nginx.scrape-uri=http://nginx:80/stub_status" ] 
    ports:
      - "9113:9113"
    networks:
      - transcendence
    depends_on:
      - nginx
    restart: always

  # daphne:
  #   image: daphne
  #   container_name: daphne
  #   build:
  #     context: ../ #raiz do projeto
  #     dockerfile: srcs/requirements/daphne/Dockerfile
  #   ports:
  #     - "8001:8001"
  #   volumes:
  #     - static_vol:/ft_transcendence/srcs/app/transcendence/staticfiles  # Arquivos estáticos com volume persistente
  #     - daphne_vol:/ft_transcendence
  #   networks:
  #     - transcendence
  #   restart: always

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_vol:/data
    networks:
      - transcendence
    restart: always

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Permite ao Portainer acessar o Docker host
      - portainer_vol:/data 
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

volumes:
  app_vol:
    name: app_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/app

  postgres_vol:
    name: postgres_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/postgres

  pgadmin_vol:
    name: pgadmin_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/pgadmin

  grafana_vol:
    name: grafana_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/grafana

  prometheus_vol:
    name: prometheus_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/prometheus

  selenium_vol:
    name: selenium_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/selenium

  minio_vol:
    name: minio_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/minio
  
  nginx_vol:
    name: nginx_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/nginx

  # daphne_vol:
  #   name: daphne_vol
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /home/${USER}/data/daphne

  static_vol:
    name: static_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/staticfiles
  
  portainer_vol:
    name: portainer_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/portainer
  
  redis_vol:
    name: redis_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/redis

networks:
    transcendence:
        name: transcendence
        driver: bridge