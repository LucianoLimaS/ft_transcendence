services:
  app:
    image: app
    container_name: app
    env_file:
      - ./.env
    build:
      context: ../ #raiz do projeto
      dockerfile: srcs/app/Dockerfile
    ports:
      - "8000:8000" # gunicorn (web)
    volumes:
      - ./app/transcendence:/ft_transcendence
      - static_vol:/ft_transcendence/staticfiles
    networks:
      - transcendence
    depends_on:
      - postgres
    restart: always

  postgres:
    image: postgres
    container_name: postgres
    build:
      context: ../ #raiz do projeto
      dockerfile: srcs/requirements/postgres/Dockerfile
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_vol:/var/lib/postgresql/data
    networks:
      - transcendence
    restart: always

  postgres-exporter:
      image: wrouesnel/postgres_exporter:latest
      container_name: postgres-exporter
      env_file:
      - ./.env
      ports:
        - "9187:9187"
      networks:
        - transcendence
      depends_on:
        - postgres
      restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - ./.env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_vol:/var/lib/pgadmin
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    env_file:
      - ./.env
    ports:
      - "3000:3000"
    volumes:
      - grafana_vol:/var/lib/grafana
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_vol:/prometheus
      - ./requirements/prometheus/:/etc/prometheus/
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - ./.env
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_vol:/data
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
  
  # selenium:
  #   image: selenium/standalone-chrome
  #   container_name: selenium
  #   # environment:
  #   # - SE_OPENTELEMETRY_ENABLED=false
  #   # - OTEL_EXPORTER_OTLP_ENDPOINT=http://00000:4317
  #   ports:
  #     - "4444:4444"
  #   volumes:
  #     - /dev/shm:/dev/shm
  #     - selenium_vol:/var/log/selenium
  #     - chrome_profiles:/tmp/chrome
  #   command: ["selenium-standalone", "start"]
  #   networks:
  #     - transcendence
  #   depends_on:
  #     - app
  #   restart: always
  
  # otel-collector:
  #   image: otel/opentelemetry-collector
  #   container_name: otel-collector
  #   ports:
  #     - "8888:8889"  # Exponha a porta 8888 para as métricas Prometheus
  #     - "4318:4318"  # Exponha a porta 4318 para o OTLP (spans e logs)
  #     - "4317:4317"  # Exponha a porta 4318 para o OTLP (spans e logs)
  #   volumes:
  #     - ./requirements/otel-collector/otel-collector-config.yaml:/etc/otel/otel-collector-config.yaml  # Seu arquivo de configuração
  #   command: ["--config", "/etc/otel/otel-collector-config.yaml"]
  #   depends_on:
  #     - app
  #   networks:
  #     - transcendence
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8888/metrics"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5

  selenium:
    image: selenium/standalone-chrome
    container_name: selenium
    ports:
      - "4444:4444"
    volumes:
      - /dev/shm:/dev/shm
      - selenium_vol:/var/log/selenium
      # - chrome_profiles:/tmp/chrome
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  nginx:
    image: nginx
    container_name: nginx
    build:
      context: ../ #raiz do projeto
      dockerfile: srcs/requirements/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./requirements/nginx/nginx.conf:/etc/nginx/nginx.conf  # Configuração personalizada do Nginx
      - ./requirements/certs:/etc/nginx/certs
      - static_vol:/static  # Arquivos estáticos com volume persistente
      - nginx_vol:/var/log/nginx # Logs do nginx
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  nginx-exporter:
      image: nginx/nginx-prometheus-exporter:latest
      container_name: nginx-exporter
      command: [ "--nginx.scrape-uri=http://nginx:80/stub_status" ] 
      ports:
        - "9113:9113"
      networks:
        - transcendence
      depends_on:
        - nginx
      restart: always

  daphne:
    image: daphne
    container_name: daphne
    build:
      context: ../ #raiz do projeto
      dockerfile: srcs/requirements/daphne/Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - static_vol:/static  # Arquivos estáticos com volume persistente
      - daphne_vol:/ft_transcendence
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

volumes:
#   chrome_profiles:
#     name: app_vol
#     driver_opts:
#       o: bind
#       type: none
#       device: /home/${USER}/data/app
  
  app_vol:
    name: app_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/app

  postgres_vol:
    name: postgres_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/postgres

  pgadmin_vol:
    name: pgadmin_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/pgadmin

  grafana_vol:
    name: grafana_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/grafana

  prometheus_vol:
    name: prometheus_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/prometheus

  selenium_vol:
    name: selenium_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/selenium

  minio_vol:
    name: minio_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/minio
  
  nginx_vol:
    name: nginx_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/nginx

  daphne_vol:
    name: daphne_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/daphne

  static_vol:
    name: static_vol
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/staticfiles

networks:
    transcendence:
        name: transcendence
        driver: bridge