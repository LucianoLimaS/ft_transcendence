services:
  app:
    image: app
    container_name: app
    env_file:
      - ./srcs/.env
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/app/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - app_vol:/ft_transcendence
      - static_vol:/ft_transcendence/staticfiles
      - logs_vol:/ft_transcendence/logs
    networks:
      - transcendence
    depends_on:
      - postgres
      - redis
      - django-worker
    restart: always

  daphne:
    image: daphne
    container_name: daphne
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/requirements/daphne/Dockerfile
    env_file:
      - ./srcs/.env
    ports:
      - "8001:8001"
    volumes:
      - static_vol:/ft_transcendence/srcs/app/transcendence/staticfiles  # Arquivos estáticos com volume persistente
      - app_vol:/ft_transcendence
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

  gunicorn:
    image: gunicorn
    container_name: gunicorn
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/requirements/gunicorn/Dockerfile
    env_file:
      - ./srcs/.env
    ports:
      - "8005:8005"
    volumes:
      - static_vol:/ft_transcendence/srcs/app/transcendence/staticfiles  # Arquivos estáticos com volume persistente
      - app_vol:/ft_transcendence
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
  
  postgres:
    image: postgres
    container_name: postgres
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/requirements/postgres/Dockerfile
    env_file:
      - ./srcs/.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_vol:/var/lib/postgresql/data
    networks:
      - transcendence
    restart: always
    attach: false

  postgres-exporter:
    image: wrouesnel/postgres_exporter:v0.8.0
    container_name: postgres-exporter
    env_file:
      - ./srcs/.env
    ports:
      - "9187:9187"
    networks:
      - transcendence
    depends_on:
      - postgres
    restart: always
    attach: false

  pgadmin:
    image: dpage/pgadmin4:8.14.0
    container_name: pgadmin
    env_file:
      - ./srcs/.env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_vol:/var/lib/pgadmin
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
    attach: false
  
  grafana:
    image: grafana
    container_name: grafana
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/requirements/grafana/Dockerfile
    env_file:
      - ./srcs/.env
    ports:
      - "3000:3000"
    volumes:
      - grafana_vol:/var/lib/grafana
      - ./srcs/requirements/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./srcs/requirements/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./srcs/requirements/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
    attach: false

  prometheus:
    image: prom/prometheus:v3.1.0-rc.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus_vol:/prometheus
      - ./srcs/requirements/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
    attach: false

  minio:
    image: minio
    container_name: minio
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/requirements/minio/Dockerfile
    env_file:
      - ./srcs/.env
    ports:
      - "9001:9001"
      - "9002:9000"  # Porta 9000 mapeada para a API S3
    volumes:
      - minio_vol:/data
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
    attach: false
  
  selenium:
    image: selenium/standalone-chrome:nightly
    container_name: selenium
    ports:
      - "4444:4444"
    volumes:
      - /dev/shm:/dev/shm
      - selenium_vol:/var/log/selenium
      # - chrome_profiles:/tmp/chrome
    networks:
      - transcendence
    depends_on:
      - app
    restart: always
    attach: false

  nginx:
    image: nginx
    container_name: nginx
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/requirements/nginx/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./srcs/requirements/nginx/nginx.conf:/etc/nginx/nginx.conf  # Configuração personalizada do Nginx
      - ./srcs/requirements/certs:/etc/nginx/certs
      - static_vol:/static  # Arquivos estáticos com volume persistente
      - nginx_vol:/var/log/nginx # Logs do nginx
    networks:
      - transcendence
    depends_on:
      - app
      - django-worker
    restart: always
    attach: false

  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:edge
    container_name: nginx-exporter
    command: [ "--nginx.scrape-uri=http://nginx:80/stub_status" ] 
    ports:
      - "9113:9113"
    networks:
      - transcendence
    depends_on:
      - nginx
    restart: always
    attach: false

  redis:
    image: redis:bookworm
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_vol:/data
    networks:
      - transcendence
    restart: always
    attach: false
  
  redis-exporter:
    image: oliver006/redis_exporter:v1.67.0
    container_name: redis-exporter
    env_file:
      - ./srcs/.env
    ports:
      - "9121:9121"
    networks:
      - transcendence
    depends_on:
      - redis
    restart: always
    attach: false

  setup_elk:
    container_name: setup_elk
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    volumes:
      - certs_vol:/usr/share/elasticsearch/config/certs
      - ./srcs/requirements/elk/elksetup.sh:/usr/local/bin/elksetup.sh
      - ./srcs/requirements/elk/kibana_export.ndjson:/usr/share/kibana/kibana_export.ndjson
    user: root
    env_file:
      - ./srcs/.env
    command: >
      sh -c "/usr/local/bin/elksetup.sh"
    healthcheck:
      test:
        [
          "CMD-SHELL",
           "[ -f config/certs/elasticsearch/elasticsearch.crt ]"
        ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - transcendence

  elasticsearch:
    container_name: elasticsearch
    depends_on:
      setup_elk:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs_vol:/usr/share/elasticsearch/config/certs
      - es_vol:/usr/share/elasticsearch/data
    env_file:
      - ./srcs/.env
    environment:
      - node.name=elasticsearch
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
      - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - transcendence
    restart: always
    attach: false

  kibana:
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:8.7.1
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs_vol:/usr/share/kibana/config/certs
      - kibana_vol:/usr/share/kibana/data
    env_file:
      - ./srcs/.env
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - transcendence
    restart: always
    ports:
      - "5601:5601"

  logstash:
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:8.7.1
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs_vol:/usr/share/logstash/certs
      - logstash_vol:/usr/share/logstash/data
      - ./srcs/requirements/elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
    networks:
      - transcendence
    restart: always

  filebeat:
    image: filebeat
    container_name: filebeat
    build:
      context: ./ #raiz do projeto
      dockerfile: srcs/requirements/elk/Dockerfile
    depends_on:
      elasticsearch:
        condition: service_healthy
    user: root
    volumes:
      - certs_vol:/usr/share/filebeat/certs
      - filebeat_vol:/usr/share/filebeat/data
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - logs_vol:/usr/share/filebeat/logs:ro
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://elasticsearch:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash:9600
    networks:
      - transcendence
    restart: always
  
  django-worker:
    container_name: django-worker
    env_file:
      - ./srcs/.env
    image: django-worker
    build:
      context: ./
      dockerfile: srcs/requirements/django-worker/Dockerfile
    networks:
      - transcendence
    expose:
      - "6379"
    restart: always
    depends_on:
      - postgres
      - redis

  portainer:
    image: portainer/portainer-ce:alpine-sts
    container_name: portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_vol:/data 
    networks:
      - transcendence
    depends_on:
      - app
    restart: always

volumes:
  app_vol:
    name: app_vol

  postgres_vol:
    name: postgres_vol

  pgadmin_vol:
    name: pgadmin_vol

  grafana_vol:
    name: grafana_vol

  prometheus_vol:
    name: prometheus_vol

  selenium_vol:
    name: selenium_vol

  minio_vol:
    name: minio_vol
  
  nginx_vol:
    name: nginx_vol

  static_vol:
    name: static_vol

  portainer_vol:
    name: portainer_vol

  redis_vol:
    name: redis_vol
  
  elasticsearch_vol:
    name: elasticsearch_vol

  es_vol:
    name: es_vol

  kibana_vol:
    name: kibana_vol

  logstash_vol:
    name: logstash_vol
  
  filebeat_vol:
    name: filebeat_vol
  
  certs_vol:
    name: certs_vol

  logs_vol:
    name: logs_vol

networks:
    transcendence:
        name: transcendence
        driver: bridge